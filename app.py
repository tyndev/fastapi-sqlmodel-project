from typing import Optional

from sqlmodel import Field, SQLModel, create_engine

# This class Hero represents the table for our heroes. And each instance we create later will represent a row in the table.
# the config table=True tells SQLModel that this is a table model, aka it represents a table.
# we tell SQLModel that this id field/column is the primary key of the table. But inside the SQL database, it is always required and can't be NULL. Why should we declare it with Optional? The id will be required in the database, but it will be generated by the database, not by our code. So, whenever we create an instance of this class (in the next chapters), we will not set the id. And the value of id will be None until we save it in the database, and then it will finally have a value. So, because in our code (not in the database) the value of id could be None, we use Optional. This way the editor will be able to help us, for example, if we try to access the id of an object that we haven't saved in the database yet and would still be None. If we didn't set the default value, whenever we use this model later to do data validation (powered by Pydantic) it would accept a value of None apart from an int, but it would still require passing that None value. And it would be confusing for whoever is using this model later (probably us), so better set the default value here.
# tell SQLModel that age is not required when validating data and that it has a default value of None. And we also tell it that, in the SQL database, the default value of age is NULL (the SQL equivalent to Python's None).
class Hero(SQLModel, table=True): 
    id: Optional[int] = Field(default=None, primary_key=True) 
    name: str
    secret_name: str
    age: Optional[int] = None 


sqlite_file_name = "database.db"
sqlite_url = f"sqlite:///{sqlite_file_name}" 
# Alternative in-Memory SQLite Database: SQLite supports a special database that lives all in memory. Hence, it's very fast, but be careful, the database gets deleted after the program terminates. You can specify this in-memory database by using just two slash characters (//) and no file name: `sqlite://`

engine = create_engine(sqlite_url, echo=True) 
# You should normally have a single engine object for your whole application and re-use it everywhere. 
# echo=True will make the engine print all the SQL statements it executes, which can help you understand what's happening. It is particularly useful for learning and debugging but in production, you would probably want to remove it.

def create_db_and_tables():
    SQLModel.metadata.create_all(engine)
    # If this was not in a function and we tried to import something from this module (from this file) in another, it would try to create the database and table every time we executed that other file that imported this module.

if __name__ == "__main__":
    create_db_and_tables()